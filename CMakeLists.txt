cmake_minimum_required(VERSION 3.19.0)

project(cmake_ros_study)

# ==============================================================================
# setup cmake

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)

set(APP_NAME ${PROJECT_NAME})
set(APP_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/..)
set(APP_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(APP_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})
set(APP_LIBRARY_DIR ${APP_ROOT_DIR}/library)
set(APP_INSTALL_DIR ${APP_ROOT_DIR}/install)

set(APP_CONDA_DIR "/Users/sangik/mambaforge")
set(APP_MAMBA_DIR "/Users/sangik/mambaforge")
set(APP_PYTHON_VER 3.9)
set(APP_ROS_VER noetic)
set(APP_ROS_DIR "${APP_MAMBA_DIR}/envs/ros_${APP_ROS_VER}")
set(APP_SHELL_TYPE zsh) # bash
set(APP_SHELL_EXE /bin/${APP_SHELL_TYPE})

set(APP_INCLUDE_DIRS "")
set(APP_LIBRARY_DIRS "")
set(APP_LIBRARIES "")
set(APP_COMPILE_OPTIONS
    -std=c++11
    -Wall
    -fPIC
    -Ofast              # Ofast is better than O2 when there are several nested loops
    #-O2
    #-O3
    -DEIGEN_NO_DEBUG
    # -g                  # valgrind
)
set(APP_LINK_OPTIONS
    -std=c++11
)

# ==============================================================================
# Eigen library

set(APP_INCLUDE_DIRS
    "${APP_INCLUDE_DIRS}"
    ${APP_LIBRARY_DIR}/eigen-3.4.0
)

# ==============================================================================
# QuadProg++ library

set(APP_INCLUDE_DIRS
    "${APP_INCLUDE_DIRS}"
    ${APP_LIBRARY_DIR}/QuadProgpp/include/QuadProg++
)
set(APP_LIBRARY_DIRS
    "${APP_LIBRARY_DIRS}"
    ${APP_LIBRARY_DIR}/QuadProgpp/lib
)
set(APP_LIBRARIES
    ${APP_LIBRARIES}
    quadprog
)

# ==============================================================================
# ROS

# ------------------------------------------------------------------------------
# create catkin_workspace and ros package

if(NOT EXISTS ${APP_BINARY_DIR}/ros/src/${APP_NAME})
    file(
        WRITE ${APP_BINARY_DIR}/ros_package_create.sh
        "#!${APP_SHELL_EXE}\n" # shell type
        "source ${APP_CONDA_DIR}/etc/profile.d/conda.sh &&\n"
        "conda activate ${APP_ROS_DIR} &&\n"
        "mkdir -p ${APP_BINARY_DIR}/ros/src &&\n"
        "cd ${APP_BINARY_DIR}/ros &&\n"
        "catkin_make &&\n"
        "source devel/setup.${APP_SHELL_TYPE} &&\n"
        "cd src &&\n"
        "catkin_create_pkg ${APP_NAME} std_msgs rospy roscpp\n"
    )
    execute_process(
        COMMAND chmod +x ros_package_create.sh
        WORKING_DIRECTORY "${APP_BINARY_DIR}"
    )
    execute_process(
        COMMAND ./ros_package_create.sh
        WORKING_DIRECTORY "${APP_BINARY_DIR}"
    )
    # In macOS, something strange happens with the build directory generated by 
    # catkin_make with execute_process. So, the build directory is recreated.
    file(REMOVE_RECURSE "${APP_BINARY_DIR}/ros/build")
    file(MAKE_DIRECTORY "${APP_BINARY_DIR}/ros/build")
endif()

# ------------------------------------------------------------------------------
# copy files

configure_file(
    ${APP_SOURCE_DIR}/ros/CMakeLists.txt
    ${APP_BINARY_DIR}/ros/src/${APP_NAME}/CMakeLists.txt
    @ONLY
)
configure_file(
    ${APP_SOURCE_DIR}/ros/package.xml
    ${APP_BINARY_DIR}/ros/src/${APP_NAME}/package.xml
)

# ==============================================================================
# configure the ROS package

file(
    WRITE ${APP_BINARY_DIR}/ros_package_configure.sh
    "#!${APP_SHELL_EXE}\n"
    "source ${APP_CONDA_DIR}/etc/profile.d/conda.sh &&\n"
    "conda activate ${APP_ROS_DIR} &&\n"
    "cd ${APP_BINARY_DIR}/ros/build &&\n"
    "cmake ../src -DCMAKE_INSTALL_PREFIX=${APP_INSTALL_DIR}/ros -DCATKIN_DEVEL_PREFIX=../devel"
)
execute_process(
    COMMAND chmod +x ros_package_configure.sh
    WORKING_DIRECTORY "${APP_BINARY_DIR}"
)
# execute_process(
#     COMMAND ./ros_package_configure.sh
#     WORKING_DIRECTORY "${APP_BINARY_DIR}"
# )
# Running the shell script with execute_process generates build errors.
add_custom_target(${APP_NAME}_ros_config ALL
    COMMAND ./ros_package_configure.sh
    WORKING_DIRECTORY "${APP_BINARY_DIR}"
)

# ------------------------------------------------------------------------------
# build the ROS package

file(
    WRITE ${APP_BINARY_DIR}/ros_package_build.sh
    "#!${APP_SHELL_EXE}\n"
    "source ${APP_CONDA_DIR}/etc/profile.d/conda.sh &&\n"
    "conda activate ${APP_ROS_DIR} &&\n"
    "cd ${APP_BINARY_DIR}/ros/build &&\n"
    "make"
)
execute_process(
    COMMAND chmod +x ros_package_build.sh
    WORKING_DIRECTORY "${APP_BINARY_DIR}"
)
add_custom_target(${APP_NAME}_ros_build ALL
    COMMAND ./ros_package_build.sh
    WORKING_DIRECTORY "${APP_BINARY_DIR}"
)
add_dependencies(
    ${APP_NAME}_ros_build
    ${APP_NAME}_ros_config
)

# ------------------------------------------------------------------------------
# install the ROS package

file(
    WRITE ${APP_BINARY_DIR}/ros_package_install.sh
    "#!${APP_SHELL_EXE}\n"
    "source ${APP_CONDA_DIR}/etc/profile.d/conda.sh &&\n"
    "conda activate ${APP_ROS_DIR} &&\n"
    "cd ${APP_BINARY_DIR}/ros/build &&\n"
    "make install"
)
execute_process(
    COMMAND chmod +x ros_package_install.sh
    WORKING_DIRECTORY "${APP_BINARY_DIR}"
)
install(
    CODE "execute_process(COMMAND ./ros_package_install.sh WORKING_DIRECTORY ${APP_BINARY_DIR})"
)

# ==============================================================================

# include_directories(${APP_INCLUDE_DIRS})

# ==============================================================================
# simulation

add_subdirectory(sim)

# ==============================================================================
# executable

add_executable(${PROJECT_NAME} main.cpp)
target_include_directories(${PROJECT_NAME}
    PUBLIC "${APP_INCLUDE_DIRS}"
    PUBLIC "${APP_SOURCE_DIR}/sim"
)
target_link_directories(${PROJECT_NAME}
    PUBLIC "${APP_LIBRARY_DIRS}"
    PUBLIC "${APP_BINARY_DIR}/sim"
)
target_link_libraries(${PROJECT_NAME}
    PUBLIC "${APP_LIBRARIES}"
    PUBLIC simulation
)
set_target_properties(${PROJECT_NAME} PROPERTIES
    COMPILE_OPTIONS "${APP_COMPILE_OPTIONS}"
    LINK_OPTIONS "${APP_LINK_OPTIONS}"
)
install(
    TARGETS ${PROJECT_NAME}
    DESTINATION "${APP_INSTALL_DIR}"
)
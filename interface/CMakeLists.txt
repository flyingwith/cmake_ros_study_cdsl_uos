set(APP_INTERFACE_NAME ${APP_NAME}_interface) # ros package name for interface
set(APP_INTERFACE_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(APP_INTERFACE_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})
set(APP_INTERFACE_INSTALL_DIR ${APP_INSTALL_DIR}/interface)

# ==============================================================================
# ROS Setup

# ------------------------------------------------------------------------------
# create catkin_workspace and ros package

if(NOT EXISTS ${APP_INTERFACE_BINARY_DIR}/ros/src/${APP_INTERFACE_NAME})
    file(
        WRITE ${APP_INTERFACE_BINARY_DIR}/ros_package_create.sh
        "#!${APP_SHELL_EXE}\n"
        "source ${APP_CONDA_DIR}/etc/profile.d/conda.sh &&\n"
        "conda activate ${APP_CONDA_ENV_DIR} &&\n"
        "mkdir -p ${APP_INTERFACE_BINARY_DIR}/ros/src &&\n"
        "cd ${APP_INTERFACE_BINARY_DIR}/ros &&\n"
        "catkin_make &&\n"
        "source devel/setup.${APP_SHELL_TYPE} &&\n"
        "cd src &&\n"
        "catkin_create_pkg ${APP_INTERFACE_NAME} std_msgs rospy roscpp\n"
    )
    execute_process(
        COMMAND chmod +x ros_package_create.sh
        WORKING_DIRECTORY "${APP_INTERFACE_BINARY_DIR}"
    )
    execute_process(
        COMMAND ./ros_package_create.sh
        WORKING_DIRECTORY "${APP_INTERFACE_BINARY_DIR}"
    )
    # In macOS, something strange happens with the build directory generated by 
    # catkin_make with execute_process. In order to remove this problem, 
    # the build directory needs to be recreated.
    file(REMOVE_RECURSE "${APP_INTERFACE_BINARY_DIR}/ros/build")
    file(MAKE_DIRECTORY "${APP_INTERFACE_BINARY_DIR}/ros/build")
endif()

# ------------------------------------------------------------------------------
# copy files

file(GLOB_RECURSE FILE_LIST CONFIGURE_DEPENDS "ros/*")
foreach(FILE ${FILE_LIST})
    get_filename_component(FILE_DIR ${FILE} DIRECTORY)
    get_filename_component(FILE_NAME ${FILE} NAME)
    get_filename_component(FILE_NAME_WLE ${FILE} NAME_WLE)
    get_filename_component(FILE_LAST_EXT ${FILE} LAST_EXT)
    # message("FILE = ${FILE}")
    # message("     = ${FILE_DIR}/${FILE_NAME_WLE}${FILE_LAST_EXT}")
    if(FILE_NAME MATCHES "CMakeLists.txt" OR FILE_NAME MATCHES "package.xml")
        configure_file(
            ${FILE}
            ${APP_INTERFACE_BINARY_DIR}/ros/src/${APP_INTERFACE_NAME}/${FILE_NAME}
            @ONLY
        )
    elseif(FILE_NAME MATCHES ".msg$")
        configure_file(
            ${FILE}
            ${APP_INTERFACE_BINARY_DIR}/ros/src/${APP_INTERFACE_NAME}/msg/${FILE_NAME}
        )
    elseif(FILE_NAME MATCHES ".srv$")
        configure_file(
            ${FILE}
            ${APP_INTERFACE_BINARY_DIR}/ros/src/${APP_INTERFACE_NAME}/srv/${FILE_NAME}
        )
    elseif(FILE_NAME MATCHES ".action$")
        configure_file(
            ${FILE}
            ${APP_INTERFACE_BINARY_DIR}/ros/src/${APP_INTERFACE_NAME}/action/${FILE_NAME}
        )
    elseif(FILE_NAME MATCHES ".cpp$")
        configure_file(
            ${FILE}
            ${APP_INTERFACE_BINARY_DIR}/ros/src/${APP_INTERFACE_NAME}/src/${FILE_NAME}
        )
    elseif(FILE_NAME MATCHES ".py$")
        configure_file(
            ${FILE}
            ${APP_INTERFACE_BINARY_DIR}/ros/src/${APP_INTERFACE_NAME}/scripts/${FILE_NAME}
        )
        execute_process(
            COMMAND chmod +x ${FILE_NAME}
            WORKING_DIRECTORY ${APP_INTERFACE_BINARY_DIR}/ros/src/${APP_INTERFACE_NAME}/scripts
        )
    elseif(FILE_NAME MATCHES ".launch$")
        configure_file(
            ${FILE}
            ${APP_INTERFACE_BINARY_DIR}/ros/src/${APP_INTERFACE_NAME}/launch/${FILE_NAME}
        )
        execute_process(
            COMMAND chmod +x ${FILE_NAME}
            WORKING_DIRECTORY ${APP_INTERFACE_BINARY_DIR}/ros/src/${APP_INTERFACE_NAME}/launch
        )
    elseif(FILE_NAME MATCHES ".sh$")
        configure_file(
            ${FILE}
            ${APP_INTERFACE_BINARY_DIR}/ros/src/${APP_INTERFACE_NAME}/test/${FILE_NAME_WLE}
        )
        execute_process(
            COMMAND chmod +x ${FILE_NAME_WLE}
            WORKING_DIRECTORY ${APP_INTERFACE_BINARY_DIR}/ros/src/${APP_INTERFACE_NAME}/test
        )
    else()
        message(STATUS "Unregistered file type: ${FILE_NAME}")
    endif()
endforeach()

# ------------------------------------------------------------------------------
# configure the ROS package

file(
    WRITE ${APP_INTERFACE_BINARY_DIR}/ros_package_configure.sh
    "#!${APP_SHELL_EXE}\n"
    "source ${APP_CONDA_DIR}/etc/profile.d/conda.sh &&\n"
    "conda activate ${APP_CONDA_ENV_DIR} &&\n"
    "cd ${APP_INTERFACE_BINARY_DIR}/ros/build &&\n"
    "cmake ../src -DCMAKE_INSTALL_PREFIX=${APP_INTERFACE_INSTALL_DIR}/ros -DCATKIN_DEVEL_PREFIX=../devel"
)
execute_process(
    COMMAND chmod +x ros_package_configure.sh
    WORKING_DIRECTORY "${APP_INTERFACE_BINARY_DIR}"
)
# execute_process(
#     COMMAND ./ros_package_configure.sh
#     WORKING_DIRECTORY "${APP_INTERFACE_BINARY_DIR}"
# )
# Running the shell script with execute_process generates build errors.
add_custom_target(${APP_INTERFACE_NAME}_ros_config ALL
    COMMAND ./ros_package_configure.sh
    WORKING_DIRECTORY "${APP_INTERFACE_BINARY_DIR}"
)

# ------------------------------------------------------------------------------
# build the ROS package

file(
    WRITE ${APP_INTERFACE_BINARY_DIR}/ros_package_build.sh
    "#!${APP_SHELL_EXE}\n"
    "source ${APP_CONDA_DIR}/etc/profile.d/conda.sh &&\n"
    "conda activate ${APP_CONDA_ENV_DIR} &&\n"
    "cd ${APP_INTERFACE_BINARY_DIR}/ros/build &&\n"
    "make"
)
execute_process(
    COMMAND chmod +x ros_package_build.sh
    WORKING_DIRECTORY "${APP_INTERFACE_BINARY_DIR}"
)
add_custom_target(${APP_INTERFACE_NAME}_ros_build ALL
    COMMAND ./ros_package_build.sh
    WORKING_DIRECTORY "${APP_INTERFACE_BINARY_DIR}"
)
add_dependencies(
    ${APP_INTERFACE_NAME}_ros_build
    ${APP_INTERFACE_NAME}_ros_config
)

# ------------------------------------------------------------------------------
# install the ROS package

file(
    WRITE ${APP_INTERFACE_BINARY_DIR}/ros_package_install.sh
    "#!${APP_SHELL_EXE}\n"
    "source ${APP_CONDA_DIR}/etc/profile.d/conda.sh &&\n"
    "conda activate ${APP_CONDA_ENV_DIR} &&\n"
    "cd ${APP_INTERFACE_BINARY_DIR}/ros/build &&\n"
    "make install"
)
execute_process(
    COMMAND chmod +x ros_package_install.sh
    WORKING_DIRECTORY "${APP_INTERFACE_BINARY_DIR}"
)
install(
    CODE "execute_process(COMMAND ./ros_package_install.sh WORKING_DIRECTORY ${APP_INTERFACE_BINARY_DIR})"
)